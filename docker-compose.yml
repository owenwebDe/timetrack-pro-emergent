version: "3.8"

services:
  # Backend Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    environment:
      - MONGO_URL=mongodb://mongo:27017
      - DB_NAME=hubstaff_clone
      - SECRET_KEY=your-production-secret-key-change-this
      - ENVIRONMENT=production
    depends_on:
      - mongo
    volumes:
      - ./backend:/app
    restart: unless-stopped
    networks:
      - hubstaff-network

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_BACKEND_URL=https://icon-time-tracker.onrender.com
      - REACT_APP_ENVIRONMENT=production
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    restart: unless-stopped
    networks:
      - hubstaff-network

  # MongoDB Service
  mongo:
    image: mongo:5.0
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_DATABASE=hubstaff_clone
    volumes:
      - mongo_data:/data/db
      - ./mongo-init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    networks:
      - hubstaff-network

  # Optional: Redis for Caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - hubstaff-network

  # Optional: Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - hubstaff-network

volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local

networks:
  hubstaff-network:
    driver: bridge
